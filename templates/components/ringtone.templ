package components

import (
	"fmt"
	"glyphtones/database"
	"strings"
)

templ Ringtone(data database.RingtoneModel, index int, ownedByLoggedInAuthor bool) {
	<div class="ringtone" data-i={ fmt.Sprintf("%d", index) } data-id={ data.DisplayID } data-phone={ strings.Join([]string(data.PhoneNames), ",") } data-glyphs={ data.Glyphs.String }>
		<div class="audio">
			<button type="button">
				<img class="red" src="/static/icons/loading.svg"/>
				<img class="white" src="/static/icons/loading.svg"/>
			</button>
			<div class="wave"></div>
		</div>
		<div class="container">
			@Captions(data, ownedByLoggedInAuthor)
			@Actions(data, ownedByLoggedInAuthor)
		</div>
	</div>
}

templ ListOfRingtones(ringtones []database.RingtoneModel, numberOfPages int, page int, loggedInAuthorID int, authorName string, view string) {
	<div id="list-of-ringtones">
		for i, ring := range ringtones {
			{{ owned := loggedInAuthorID == 1 || ring.AuthorID == loggedInAuthorID }}
			@Ringtone(ring, i, owned)
		}
		if len(ringtones) == 0 {
			if view == "profile" {
				<span>There aren't any uploaded glyphtones yet!</span>
			} else if view == "index" {
				<span>There are no glyphtones matching your search.</span>
			}
		} else {
			@Pages(view, authorName, numberOfPages, page)
		}
	</div>
	<div id="unauthorized-message"></div>
	<script src="/static/scripts/ringtone.js" type="module"></script>
}

templ Rename(ringtone database.RingtoneModel, err error) {
	<form hx-post={ fmt.Sprintf("/rename/%s", ringtone.DisplayID) } hx-swap="outerHTML" class="captions" id="swap">
		<div>
			<input type="text" value={ ringtone.Name } name="name" autofocus/>
			<button type="submit">
				<img src="/static/icons/ok.svg" width="15"/>
			</button>
		</div>
		if err != nil {
			<p>{ err.Error() }</p>
		} else {
			<p></p>
		}
	</form>
}

templ Captions(ringtone database.RingtoneModel, ownedByLoggedInAuthor bool) {
	<div class="captions">
		<span class="name">
			{ ringtone.Name }
			if ownedByLoggedInAuthor {
				<img src="/static/icons/edit.svg" hx-get={ fmt.Sprintf("/rename/%s", ringtone.DisplayID) } hx-target="closest .captions" hx-swap="outerHTML" height="15" width="15"/>
			}
		</span>
		<span>by <a href={ templ.SafeURL(fmt.Sprintf("/author/%s", ringtone.AuthorName)) }>{ ringtone.AuthorName }</a></span>
		<div class="tags">
			<span>Phone { strings.Join(ringtone.PhoneNames, " / ") }</span>
			@CircleDivider()
			if (ringtone.AutoGenerated) {
				<span>Auto generated</span>
			} else {
				<span>{ ringtone.EffectName }</span>
			}
		</div>
	</div>
}

templ Actions(ringtone database.RingtoneModel, ownedByLoggedInAuthor bool) {
	<div class="actions">
		<div class="first-line">
			<a href={ templ.SafeURL(fmt.Sprintf("/sounds/%s.ogg", ringtone.DisplayID)) } title="Download" download={ fmt.Sprintf("%s - Phone %s.ogg", ringtone.Name, strings.Join(ringtone.PhoneNames, ", ")) } rel="nofollow">
				<img src="/static/icons/download.svg" hx-post={ fmt.Sprintf("/download/%s", ringtone.DisplayID) } hx-swap="none"/>
				<img src="/static/icons/download-red.svg" hx-post={ fmt.Sprintf("/download/%s", ringtone.DisplayID) } hx-swap="none"/>
			</a>
			<a href={ templ.SafeURL(fmt.Sprintf("/g/%s", ringtone.DisplayID)) } title="Share">
				<img src="/static/icons/share.svg"/>
				<img src="/static/icons/share-red.svg"/>
			</a>
		</div>
		<div class="second-line">
			if ownedByLoggedInAuthor {
				<a hx-post={ fmt.Sprintf("/delete-ringtone/%s", ringtone.DisplayID) } hx-swap="none" hx-confirm={ fmt.Sprintf("Do you really want to delete \"%s\" glyphtone?", ringtone.Name) } title="Delete">
					<img src="/static/icons/remove.svg"/>
					<img src="/static/icons/remove-red.svg"/>
				</a>
			} else {
				@Votes(ringtone.DisplayID, ringtone.Votes, ringtone.LoggedInAuthorsVote)
			}
		</div>
	</div>
}

templ Votes(displayID string, votes int, userVote int) {
	<div class="vote">
		if userVote == 1 {
			<a hx-post={ fmt.Sprintf("/vote/%s?vote=0", displayID) } hx-target="closest .vote" hx-swap="outerHTML" title="Upvote / Like" hx-on::responseError="if(event.detail.xhr.status === 401) alert('Unauthorized! Please log in.');">
				<img src="/static/icons/up-selected.svg" height="34" width="34"/>
				<img src="/static/icons/up-red.svg" height="34" width="34"/>
			</a>
			<span>{ fmt.Sprintf("%d", votes) }</span>
			<a hx-post={ fmt.Sprintf("/vote/%s?vote=2", displayID) } hx-target="closest .vote" hx-swap="outerHTML" title="Downvote / Dislike" hx-on::responseError="if(event.detail.xhr.status === 401) alert('Unauthorized! Please log in.');">
				<img src="/static/icons/down.svg" height="34" width="34"/>
				<img src="/static/icons/down-red.svg" height="34" width="34"/>
			</a>
		} else if userVote == 2 {
			<a hx-post={ fmt.Sprintf("/vote/%s?vote=1", displayID) } hx-target="closest .vote" hx-swap="outerHTML" title="Upvote / Like" hx-on::responseError="if(event.detail.xhr.status === 401) alert('Unauthorized! Please log in.');">
				<img src="/static/icons/up.svg" height="34" width="34"/>
				<img src="/static/icons/up-red.svg" height="34" width="34"/>
			</a>
			<span>{ fmt.Sprintf("%d", votes) }</span>
			<a hx-post={ fmt.Sprintf("/vote/%s?vote=0", displayID) } hx-target="closest .vote" hx-swap="outerHTML" title="Downvote / Dislike" hx-on::responseError="if(event.detail.xhr.status === 401) alert('Unauthorized! Please log in.');">
				<img src="/static/icons/down-selected.svg" height="34" width="34"/>
				<img src="/static/icons/down-red.svg" height="34" width="34"/>
			</a>
		} else {
			// userVote = 0
			<a hx-post={ fmt.Sprintf("/vote/%s?vote=1", displayID) } hx-target="closest .vote" hx-swap="outerHTML" title="Upvote / Like" hx-on::responseError="if(event.detail.xhr.status === 401) alert('Unauthorized! Please log in.');">
				<img src="/static/icons/up.svg" height="34" width="34"/>
				<img src="/static/icons/up-red.svg" height="34" width="34"/>
			</a>
			<span>{ fmt.Sprintf("%d", votes) }</span>
			<a hx-post={ fmt.Sprintf("/vote/%s?vote=2", displayID) } hx-target="closest .vote" hx-swap="outerHTML" title="Downvote / Dislike" hx-on::responseError="if(event.detail.xhr.status === 401) alert('Unauthorized! Please log in.');">
				<img src="/static/icons/down.svg" height="34" width="34"/>
				<img src="/static/icons/down-red.svg" height="34" width="34"/>
			</a>
		}
	</div>
}

templ CircleDivider() {
	<svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
		<circle cx="50" cy="50" r="50"></circle>
	</svg>
}
